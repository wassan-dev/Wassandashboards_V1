@page "/manage-regions"
@inject NavigationManager Navigation
@inject IDbContextFactory<DashboardDbContext> DbFactory

<h5>Manage Regions for @UserName</h5>

<div>
    @if (isLoading)
    {
        <div class="d-flex justify-content-center my-3">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <ul class="list-group">
            @if (regions.Any())
            {
                @foreach (var region in regions)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @region.RegionName
                        <input type="checkbox" checked="@selectedRegionIds.Contains(region.Id)"
                               @onchange="(e) => ToggleRegionAssignment(region.Id, (bool)e.Value!)" />
                    </li>
                }
            }
            else
            {
                <div class="mt-3">No Data Found!</div>
            }
        </ul>
    }
</div>

<div class="mt-3">
    <button class="btn btn text-white" style="background-color:#779c79" @onclick="SaveRegionAssignments" disabled="@(isLoading)">Save</button>
    <button class="btn btn-secondary" @onclick="CloseManageRegionsModal" disabled="@(isLoading)">Close</button>
</div>

@code {
    [Parameter] 
    public string UserName { get; set; } = null; // Default for testing

    private List<Regions> regions = new();
    private HashSet<long> selectedRegionIds = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadRegions();
    }

    /// <summary>
    /// Loads all regions first, then assigns pre-checked values based on user assignments.
    /// </summary>
    private async Task LoadRegions()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();

            // Fetch all regions from the Regions table
            regions = await context.Regions.ToListAsync();

            // Fetch user's assigned regions from the ManageRegions table
            var assignedRegions = await context.ManageRegions
                .Where(m => m.UserEmail == UserName)
                .Select(m => m.RegionID)
                .ToListAsync();

            selectedRegionIds = assignedRegions.ToHashSet();  // Store the assigned regions for user
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading regions: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Toggles the selection of a region in HashSet.
    /// </summary>
    private void ToggleRegionAssignment(long regionId, bool isChecked)
    {
        if (isChecked)
            selectedRegionIds.Add(regionId);  // Add region to selected set
        else
            selectedRegionIds.Remove(regionId);  // Remove region from selected set
    }

    /// <summary>
    /// Saves the selected regions for the user.
    /// </summary>
    private async Task SaveRegionAssignments()
    {
        isLoading = true;
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();

            // Remove old assignments from the ManageRegions table for this user
            var existingRegions = context.ManageRegions.Where(m => m.UserEmail == UserName);
            context.ManageRegions.RemoveRange(existingRegions);

            // Add new assignments
            var newRegions = selectedRegionIds
                .Select(regionId => new ManageRegions { UserEmail = UserName, RegionID = regionId })
                .ToList();

            // Save the new assignments to the database
            await context.ManageRegions.AddRangeAsync(newRegions);
            await context.SaveChangesAsync();

            // Redirect after saving
            Navigation.NavigateTo("/users", true);
            Console.WriteLine("Regions updated successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving regions: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Closes the modal (if implemented).
    /// </summary>
    private void CloseManageRegionsModal()
    {
        Navigation.NavigateTo("/"); // Navigate back to the main page or previous page
    }
}
