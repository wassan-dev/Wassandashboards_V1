@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Wassandashboard.Data

@attribute [AllowAnonymous]

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IHttpContextAccessor HttpContextAccessor
@layout HomeLayout

<PageTitle>Log in</PageTitle>

<head>
    <style>
        /* Background styling */
        .login-page {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center; 
            background-color:#3D8D7A;
        }

        /* Login card */
        .login-card {
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 400px;
        }

        /* Form controls */
        .form-control {
            border-radius: 8px;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ced4da;
        }

            .form-control:focus {
                border-color: #007bff;
                box-shadow: none;
            }

        /* Login button */
        .btn-login {
            background: #007bff;
            color: white;
            font-size: 18px;
            border-radius: 8px;
            padding: 12px;
            border: none;
            width: 100%;
            transition: background 0.3s;
        }

            .btn-login:hover {
                background: #0056b3;
            }

        /* Forgot Password */
        .forgot-password {
            text-align: center;
            margin-top: 15px;
        }

            .forgot-password a {
                color: #007bff;
                text-decoration: none;
                font-weight: bold;
            }

                .forgot-password a:hover {
                    text-decoration: underline;
                }
    </style>
</head>

<div class="login-page">
    <div class="login-card">
        <h3 class="text-center">Login</h3>
        <StatusMessage Message="@errorMessage" />

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" id="email" placeholder="name@example.com" required />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" id="password" placeholder="••••••••" required />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-check">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMe" />
                <label class="form-check-label" for="rememberMe">
                    Remember me
                </label>
            </div>

            <button type="submit" class="btn btn-login mt-3">Login</button>

            <div class="forgot-password">
                <a href="Account/ForgotPassword">Forgot your password?</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private bool _hasSignedOut = false;

    protected override async Task OnInitializedAsync()
    {
        if (!_hasSignedOut && HttpContextAccessor.HttpContext?.Request?.Method != null &&
            HttpMethods.IsGet(HttpContextAccessor.HttpContext.Request.Method))
        {
            Logger.LogInformation("Clearing external cookie...");
            await HttpContextAccessor.HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            _hasSignedOut = true; // Set flag to true so it doesn't run again
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            if (ReturnUrl == "/" || string.IsNullOrEmpty(ReturnUrl))
            {
                ReturnUrl = "/dashboard";
            }
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
