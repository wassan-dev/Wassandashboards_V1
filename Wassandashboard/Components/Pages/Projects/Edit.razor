@page "/projects/edit"

@using Microsoft.EntityFrameworkCore
@using Wassandashboard.Data.Entities
@inject IDbContextFactory<Wassandashboard.Data.DashboardDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h4 class="text-center">Edit Project</h4>
<hr />
@if (Projects is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12">
            <EditForm method="post" Model="Projects" OnValidSubmit="UpdateOrganization" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Projects.Id" value="@Projects.Id" />
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="Name">Project Name<span class="text-danger">*</span></label>
                            <InputText id="Name" class="form-control" @bind-Value="Projects.Name" />
                            <ValidationMessage For="@(() => Projects.Name)" />
                        </div>
                    </div>
                  
                </div>                
                <button type="submit" class="btn btn-primary float-end">Save</button>
                <a href="/projects" class="btn">Back</a>
            </EditForm>
        </div>
    </div>
}


@code {
    [SupplyParameterFromQuery(Name = "Id")]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Projects? Projects { get; set; }


    protected override async Task OnInitializedAsync()
    {

        using var context = DbFactory.CreateDbContext();
        Projects ??= await context.Projects.FirstOrDefaultAsync(m => m.Id == Id);

        if (Projects is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }




    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateOrganization()
    {


        using var context = DbFactory.CreateDbContext();

        // Fetch the current org from the database
        var existingOrg = await context.Projects.AsNoTracking().FirstOrDefaultAsync(g => g.Id == Projects.Id);

        if (existingOrg == null)
        {
            // org not found
            NavigationManager.NavigateTo("notfound");
            return;
        }           
        context.Attach(Projects!).State = EntityState.Modified;       
        try
        {

            await context.SaveChangesAsync();            
            NavigationManager.NavigateTo("/projects",true);
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!OrganizationExists(Projects.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
    }

    bool OrganizationExists(long id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Projects.Any(e => e.Id == id);
    }
}
