@page "/users"

@using Microsoft.AspNetCore.Identity

@using Microsoft.EntityFrameworkCore

@using Microsoft.AspNetCore.Components.QuickGrid

@using Wassandashboard.Data.Constants

@using Wassandashboard.Data.Entities

@using Wassandashboard.Data

@inject ApplicationDbContext _context

@inject UserManager<ApplicationUser> UserManager

@inject RoleManager<IdentityRole> RoleManager

@inject NavigationManager Navigation

<PageTitle>Users</PageTitle>

<div class="row">
    <div class="d-flex justify-content-between align-items-center">
        <h4 class="mt-3">Users</h4>
        <a class="btn btn-sm btn-success" href="/account/register">Create New</a>
    </div>
    <hr />
    <div class="card">
        <QuickGrid Class="table" Items="Users" Pagination="pagination">
            <PropertyColumn Property="user => user.UserName" />
            <PropertyColumn Property="user => user.Email" />
            <PropertyColumn Property="user => user.EmailConfirmed" Title="Active" />
            <TemplateColumn class="text-nowrap" Context="user">
                <button @onclick="@(e => ShowNgos(user.Email))" class="btn btn-sm w-50" style="background-color:#626F47; border-color:#626F47; color: white;">Manage Regions</button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="pagination" />
    </div>
</div>

<!-- Modal for Managing Regions -->
@if (isModalVisible)

{
    <div class="modal show d-block mt-5" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Manage Regions for @UserName</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>

                <div class="modal-body">

                    @if (regions != null)

                    {
                        <ul>

                            @foreach (var region in regions)

                            {
                                <li>
                                    <label>
                                        <input type="checkbox" @bind="@region.Selected" />

                                        @region.RegionName
                                    </label>
                                </li>

                            }
                        </ul>

                    }
                </div>

                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="SaveRegions">Save Changes</button>
                    <button class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>

}

@code {

    public IQueryable<ApplicationUser> Users { get; set; }

    public PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    public class RegionResponse

    {

        public string RegionName { get; set; }

        public bool Selected { get; set; }

    }

    private bool isModalVisible = false;  // Control modal visibility

    private string UserName { get; set; }

    private List<RegionResponse> regions;

    protected override async Task OnInitializedAsync()

    {

        var list = await UserManager.GetUsersInRoleAsync(AppConstants.ApplicationRole);

        Users = list.AsQueryable();

    }

    // Show Manage Regions Modal for the selected user

    private void ShowNgos(string userEmail)

    {

        UserName = userEmail;  // Set the username for the modal

        isModalVisible = true;  // Show the modal

        // Fetch regions for the user (this can be customized based on your data model)

        regions = new List<RegionResponse>

        {

            new RegionResponse { RegionName = "Region 1", Selected = true },

            new RegionResponse { RegionName = "Region 2", Selected = false },

            new RegionResponse { RegionName = "Region 3", Selected = true }

        };

    }

    // Save the selected regions for the user

    private void SaveRegions()

    {

        // Logic to save the selected regions for the user

        // Here, you could update the regions in your database

        isModalVisible = false;  // Close the modal

        Navigation.NavigateTo("/users"); // Redirect back to users page

    }

    // Close the modal

    private void CloseModal()

    {

        isModalVisible = false;  // Close the modal

    }

}

