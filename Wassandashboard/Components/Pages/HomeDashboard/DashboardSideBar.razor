@inherits LayoutComponentBase
@using static Wassandashboard.Data.Models.Enums.CommonEnums
@inject NavigationManager _navigation
@inject IDbContextFactory<Wassandashboard.Data.DashboardDbContext> DbFactory
@rendermode InteractiveServer
@attribute [AllowAnonymous]
@layout HomeLayout



<style>

    .layout-container {
        display: flex;
        flex-direction: row;
        height: 100vh;
        margin: 0;

    }

    /* Fixed-width sidebar on the left */
    .sidebar {
        width: 100%;
        background-color: #181824; /* Dark background */
        color: #fff;
        left: 0;
        bottom: 0;
        display: flex;
        flex-direction: column;
    }

    .nav-list {
        list-style: none;
        padding: 0;
        margin: 0;  
        flex: 1;
        overflow-y: hidden;
    }

    .nav-item {
    }

    .sidebar-header {
        font-size: 1.2rem;
        font-weight: bold;
        border-bottom: 1px solid #444;
        z-index: 1000; /* Ensure the sidebar is above the main content */
    }

  
    .content-wrapper {
        margin-left: 220px; /* Adjust for sidebar overlay */

        flex-grow: 1;
        overflow-y: auto;
        height: 100vh;
    }

    .main-content {
        margin-left: 250px; /* Sidebar width */
        overflow: auto;
        background-color: #f0f1f6;
    }

    /* Links in the sidebar */
    .nav-link {
        display: flex;
        align-items: center;
        color: #8e94a9;
        text-decoration: none;
        padding: 0.75rem 1rem;
        transition: background-color 0.2s;
        border-radius: 4px;
        position: relative;
    }

        .nav-link i {
            color: #33c92d !important;
            margin-right: 10px;
            font-size: 1.2rem;
        }

        .nav-link:hover,
        .nav-link.active {
            color: white !important;
            border-radius: 5px;
        }

    .submenu {
        list-style: none;
        padding-left: 15px;
        margin: 0;
        display: none;
    }

        .submenu.show {
            display: block;
        }

    .arrow {
        font-size: 1rem;
        color: #8e94a9;
        position: absolute;
        right: 15px;
        transition: transform 0.3s ease;
    }

        .arrow.active {
            color: white;
            transform: rotate(90deg); /* Rotate arrow when submenu is open */
        }
</style>
<header class=" position-relative  w-100" >
    <nav class="navbar navbar-expand-lg navbar-light">

<!-- Layout container: sidebar on the left, main content on the right -->
 @* <div class="layout-container">
 *@
    <!-- Sidebar -->
    <div class="sidebar" >
        <!-- Brand/Title at the top -->
        <div class="sidebar-header d-flex px-4 p-2 justify-content-between " >
            Dashboard
        
                <div class="group d-flex align-items-center bg-light " style="border-radius:10px">
                    <button class="navbar-toggler"
                            type="button"
                            data-toggle="collapse"
                            data-target="#navbarSupportedContent"
                            aria-controls="navbarSupportedContent"
                            aria-expanded="false"
                            aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                </div>
            </div>
                <div class="collapse navbar-collapse justify-content-end"
                     id="navbarSupportedContent">
        <!-- Navigation items -->
        <ul class="nav-list">
            @foreach (var item in menuItems)
            {
                <li class="nav-item">
                    @if (item.SubItems?.Any() == true)
                    {
                        <a href="javascript:void(0)"
                           class="nav-link @(selectedMenuItem == item ? "active" : "")"
                           @onclick="() => ToggleSubmenu(item)">
                            <i class="bi @(item.Icon)"></i>
                            @item.Title
                            <span class="arrow @(item.IsExpanded ? "open" : "")">></span>
                        </a>
                        <ul class="submenu @(item.IsExpanded ? "show" : "")">
                            @foreach (var subItem in item.SubItems)
                            {
                                <li>
                                    <a href="javascript:void(0)"
                                       class="nav-link @(selectedMenuItem == subItem ? "active" : "")"
                                       @onclick="() => LoadContent(subItem)">
                                        @subItem.Title
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <a href="javascript:void(0)"
                           class="nav-link @(selectedMenuItem == item ? "active" : "")"
                           @onclick="() => LoadContent(item)">
                            <i class="bi @(item.Icon)"></i>
                            @item.Title
                        </a>
                    }
                </li>
            }
        </ul>
    </div>

    <!-- Main content (Blazor Body) -->
    <div class="main-content">
        @Body
    </div>

</div>
</nav>
</header>
@code {
    [Parameter] public string PrivateOrPublic { get; set; } = string.Empty;

    private MenuItem selectedMenuItem;
    private List<ProjectLinks> privateReports = new();
    private List<ProjectLinks> publicReports = new();
    private List<MenuItem> menuItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            await LoadReports();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task LoadReports()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            var reports = await context.ProjectLinks.ToListAsync();
            if (reports?.Any() == true)
            {
                privateReports = reports.Where(x => x.IsPrivateOrPublic == (int)ProjectVisibility.Private).ToList();
                publicReports = reports.Where(x => x.IsPrivateOrPublic == (int)ProjectVisibility.Public).ToList();
                menuItems = new List<MenuItem>();

                if (PrivateOrPublic == ProjectVisibility.Public.ToString())
                {
                    await LoadReportMenu(publicReports, context, menuItems);
                }
                else if (PrivateOrPublic == ProjectVisibility.Private.ToString())
                {
                    await LoadReportMenu(reports, context, menuItems);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reports: {ex.Message}");
        }
    }

    private async Task LoadReportMenu(List<ProjectLinks> reports, DashboardDbContext context, List<MenuItem> menuList)
    {
        if (reports == null || reports.Count == 0) return;

        var groupedProjects = reports
            .Where(x => !x.IsSingleLink)
            .GroupBy(x => x.ProjectId)
            .ToDictionary(g => g.Key, g => g.ToList());

        var projects = await context.Projects
            .Where(p => groupedProjects.Keys.Contains(p.Id))
            .ToDictionaryAsync(p => p.Id, p => p.Name);

        foreach (var data in reports)
        {
            if (data == null) continue;

            string icon = data.IsSingleLink ? "bi-file-earmark" : "bi-folder";

            if (data.IsSingleLink)
            {
                // Single link goes directly in the menu
                menuList.Add(new MenuItem(data.ProjectId, data.ProjectReportName, data.ProjectLink, icon));
            }
            else if (groupedProjects.ContainsKey(data.ProjectId))
            {
                // Group sub-items under a parent folder
                var subItems = groupedProjects[data.ProjectId]
                    .Select(x => new MenuItem(x.Id, x.ProjectReportName, x.ProjectLink))
                    .ToList();

                var projectName = projects.ContainsKey(data.ProjectId)
                    ? projects[data.ProjectId]
                    : "Unknown Project";

                if (!menuList.Any(m => m.ReportID == data.ProjectId && m.Title == projectName))
                {
                    menuList.Add(new MenuItem(data.ProjectId, projectName, "#", "bi-folder", subItems));
                }
            }
        }
    }

    private async Task ToggleSubmenu(MenuItem item)
    {
        item.IsExpanded = !item.IsExpanded;
    }

    private async Task LoadContent(MenuItem menuItem)
    {
        selectedMenuItem = menuItem;
        StateHasChanged();

        if (PrivateOrPublic == ProjectVisibility.Public.ToString())
        {
            _navigation.NavigateTo($"/publicreport/{menuItem.ReportID}");
        }
        else if (PrivateOrPublic == ProjectVisibility.Private.ToString())
        {
            _navigation.NavigateTo($"/privatereport/{menuItem.ReportID}");
        }
    }

    public class MenuItem
    {
        public long ReportID { get; set; }
        public string Title { get; set; }
        public string Url { get; set; }
        public string? Icon { get; set; }
        public List<MenuItem>? SubItems { get; set; }
        public bool IsExpanded { get; set; }

        public MenuItem(long reportID, string title, string url, string? icon = null, List<MenuItem>? subItems = null)
        {
            ReportID = reportID;
            Title = title;
            Url = url;
            Icon = icon;
            SubItems = subItems;
        }
    }
}
