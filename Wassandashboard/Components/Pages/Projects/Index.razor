@page "/Projects"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Wassandashboard.Data.Entities
@using Wassandashboard.Data
@using Wassandashboard.Data.Models.Dto
@using static Wassandashboard.Data.Models.Enums.CommonEnums
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<Wassandashboard.Data.DashboardDbContext> DbFactory

@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<div class="card p-3">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="mb-0">Projects</h3>

        <div class="d-flex align-items-center gap-3 mb-3 ">
            <AuthorizeView Policy="@Permissions.Projects.Create">
                <button class="btn btn-success btn-sm d-flex align-items-center gap-2" @onclick="OpenCreateModal">
                    <i class="fa fa-plus"></i> Create New
                </button>
            </AuthorizeView>
            <AuthorizeView Policy="@Permissions.Projects.Export">
                <button @onclick="ExportToExcel" class="btn btn-success  btn-sm d-flex align-items-center gap-2">
                    <i class="fa fa-file-excel-o"></i> Export to Excel
                </button>
            </AuthorizeView>
        </div>
    </div>

    <input type="search" @bind="universalSearch" @bind:event="oninput" placeholder="Search..." class="form-control mb-2 mt-2 w-25" />

    <div class="grid">
        <QuickGrid class="table table-responsive" Items="FilteredData.AsQueryable()">
            <PropertyColumn class="text-nowrap" Property="Projects => Projects.Name" Title="Project Name" />
            <TemplateColumn Context="Projects" Title="Links">
                <button class="btn  btn-sm" @onclick="() => OpenViewModal(Projects)">
                    <i class="fa-solid fa-eye"></i>
                </button>
            </TemplateColumn>
            <TemplateColumn Context="Projects" Title="Actions">
                <div class="d-flex gap-2">
                    <button class="btn  btn-sm" @onclick="() => OpenEditModal(Projects)">
                        <i class="fa-solid fa-pencil-square-o"></i>
                    </button>
                    <a href="@($"projects/delete?id={Projects.Id}")">
                        <i class="fa-solid fa-trash-o text-danger"></i>
                    </a>
                </div>
            </TemplateColumn>
        </QuickGrid>
    </div>
</div>

<!-- Modal for Editing Project -->
@if (isEditModalOpen)
{
    <div class="modal show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered  w-75 modal-dialog-scrollable ">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Project: @selectedProject?.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>

                <div class="modal-body">
                    @if (isLoading)
                    {
                        <div class="text-center my-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label class="fw-bold text-primary-emphasis">Select Project Type:</label>
                            <div class="d-flex gap-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="singleProject"
                                           @bind="@this.isSingleProject" @oninput="ToggleSingleProject" />
                                    <label class="form-check-label text-dark fw-medium" for="singleProject">Single Project</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="multipleProjects"
                                           @bind="@this.isMultipleProjects" @oninput="ToggleMultipleProjects" />
                                    <label class="form-check-label text-dark fw-medium" for="multipleProjects">Multiple Projects</label>
                                </div>
                            </div>
                        </div>

                        @if (isSingleProject)
                        {
                            <div class="input-group mb-2 shadow-sm rounded d-flex align-items-center gap-2">
                                <input type="text" class="form-control form-control-sm border-primary" placeholder="Enter project link"
                                       @bind-value="linkInputs[0].Link" />

                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="visibility_@(0)"
                                           value="@ProjectVisibility.Public"
                                           checked="@(linkInputs[0].Visibility == (int)ProjectVisibility.Public)"
                                           @onchange="(e) => UpdateVisibility(0, ProjectVisibility.Public)" />
                                    <label class="form-check-label">Public</label>
                                </div>

                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="visibility_@(0)"
                                           value="@ProjectVisibility.Private"
                                           checked="@(linkInputs[0].Visibility == (int)ProjectVisibility.Private)"
                                           @onchange="(e) => UpdateVisibility(0, ProjectVisibility.Private)" />
                                    <label class="form-check-label">Private</label>
                                </div>
                            </div>
                        }
                        else if (isMultipleProjects)
                        {
                            @for (int i = 0; i < linkInputs.Count; i++)
                            {
                                var index = i;
                                <div class="input-group mb-2 shadow-sm rounded d-flex align-items-center gap-2">
                                    <input type="text" class="form-control form-control-sm border-secondary" placeholder="Project Label"
                                           value="@linkInputs[index].Label"
                                           @oninput="e => UpdateProjectLabel(index, e.Value.ToString())" />

                                    <input type="text" class="form-control form-control-sm border-secondary" placeholder="Enter link"
                                           value="@linkInputs[index].Link"
                                           @oninput="e => UpdateProjectLink(index, e.Value.ToString())" />

                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="visibility_@(index)"
                                               value="@ProjectVisibility.Public"
                                               checked="@(linkInputs[index].Visibility == (int)ProjectVisibility.Public)"
                                               @onchange="(e) => UpdateVisibility(index, ProjectVisibility.Public)" />
                                        <label class="form-check-label">Public</label>
                                    </div>

                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="visibility_@(index)"
                                               value="@ProjectVisibility.Private"
                                               checked="@(linkInputs[index].Visibility == (int)ProjectVisibility.Private)"
                                               @onchange="(e) => UpdateVisibility(index, ProjectVisibility.Private)" />
                                        <label class="form-check-label">Private</label>
                                    </div>

                                    <button class="btn btn-secondary btn-sm px-3" type="button" @onclick="AddNewLink">+</button>
                                    @if (linkInputs.Count() > 1)
                                    {
                                        <button class="btn btn-outline-danger btn-sm px-3" type="button" @onclick="() => RemoveLink(index)">-</button>
                                    }
                                </div>
                            }
                        }
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn text-white" style="background-color:#779c79" @onclick="SaveProjectChanges" disabled="@(isLoading)">Save</button>
                    <button class="btn btn-secondary" @onclick="CloseEditModal" disabled="@(isLoading)">Close</button>
                </div>
            </div>
        </div>
    </div>
}


@if (isViewModalOpen)
{
    <div class="modal show d-block" style="background: rgba(0, 0, 0, 0.4);">
        <div class="modal-dialog modal-dialog-centered modal-sm modal-dialog-scrollable ">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header bg-gradient text-black rounded-top">
                    <h5 class="modal-title fw-semibold">🔗 Project Links</h5>
                    <button type="button" class="btn-close btn-close-black" @onclick="CloseViewModal"></button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body p-4 bg-white">
                    @if (isLoading)
                    {
                        <!-- Loading Spinner -->
                        <div class="text-center my-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (selectedProject != null && selectedProject.ProjectLinksData != null && selectedProject.ProjectLinksData.Any())
                    {
                        <ul class="list-group">
                            @foreach (var link in selectedProject.ProjectLinksData)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center border-light shadow-sm rounded-3 mb-2 px-3 py-2">
                                    <div class="text-dark fw-medium d-flex align-items-center gap-2">
                                        <i class="fas fa-link text-primary"></i> @link.Label
                                    </div>
                                    <a href="@link.Link" class="btn btn-sm btn-secondary rounded-pill px-3" target="_blank">
                                        Open 🔗
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-center text-muted fw-medium">🚫 No links available.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (isCreateModalOpen)
{
    <div class="modal show d-block" style="background: rgba(0, 0, 0, 0.4);">
        <div class="modal-dialog modal-dialog-centered modal-sm modal-dialog-scrollable">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header bg-gradient text-black rounded-top">
                    <h5 class="modal-title fw-semibold"> Create Project</h5>
                    <button type="button" class="btn-close btn-close-black" @onclick="CloseCreateModal"></button>
                </div>

                <!-- Modal Body -->
                <div class="modal-body p-4 bg-white">
                    <EditForm method="post" Model="project" OnValidSubmit="AddOrganization" FormName="create" Enhance>
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <!-- Project Name -->
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label for="Name">Project Name<span class="text-danger">*</span></label>
                                    <InputText id="Name" class="form-control" @bind-Value="project.Name" />
                                    <ValidationMessage For="@(() => project.Name)" />
                                </div>
                            </div>
                            <!-- Location -->                        
                        </div>

                     
                        <div class="row mt-4">
                            <div class="col-md-6">
                                <button type="submit" class="btn btn text-white float-end" style="background-color:#779c79;">Create</button>
                            </div>
                            <div class="col-md-6">
                                <a href="/projects" class="btn btn-secondary" @onclick="CloseCreateModal">Close</a>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}


@code {

    #region Parameters
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    #endregion

    #region Fields
    string universalSearch = "";
    private bool isLoading = false;
    List<ProjectsGridDTO> ProjectsList = new List<ProjectsGridDTO>();
    List<ProjectsGridDTO> Projects = new List<ProjectsGridDTO>();
    bool isEditModalOpen = false;
    ProjectsGridDTO? selectedProject;
    private List<ProjectLinksData> linkInputs = new List<ProjectLinksData> { new ProjectLinksData() };
    private bool isSingleProject = false;
    private bool isMultipleProjects = false;
    private string singleProjectLink = string.Empty;
    private bool isViewModalOpen = false;
    private ProjectVisibility selectedVisibility;
    #endregion
    DashboardDbContext context = default!;
    [SupplyParameterFromForm]
    public Projects project { get; set; } = new();
    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(project);       
        using var context = DbFactory.CreateDbContext();

        var projects = await context.Projects.ToListAsync(); // Fetch data asynchronously

        if (projects != null && projects.Any())
        {
            foreach (var data in projects)
            {
                if (data != null)
                {
                    this.Projects.Add(new ProjectsGridDTO
                        {
                            Id = data.Id,
                            Name = data.Name,

                        });
                }
            }
        }
    }

    public async Task AddOrganization()
    {
        if (!editContext.Validate())
        {
            return;
        }
        using var context = DbFactory.CreateDbContext();
        context.Projects.Add(project);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/projects", true);
    }

    #region Lifecycle Methods


    #endregion

    #region Computed Properties
    List<ProjectsGridDTO> FilteredData => string.IsNullOrEmpty(universalSearch)
        ? Projects ?? new List<ProjectsGridDTO>() // Ensure it's not null
        : Projects?.Where(c => c.Name.ToLower().Contains(universalSearch.ToLower())).ToList() ?? new List<ProjectsGridDTO>();
    #endregion


    #region Modal Methods

    private async void OpenEditModal(ProjectsGridDTO project)
    {
        if (project == null) return;

        isLoading = true; // Show spinner
        await InvokeAsync(StateHasChanged);

        using var context = DbFactory.CreateDbContext();

        var existedData = await context.ProjectLinks
                                       .Where(pl => pl.ProjectId == project.Id) // Fetch only relevant links
                                       .ToListAsync();

        linkInputs = existedData?.Select(pl => new ProjectLinksData
            {
                Label = pl.ProjectReportName,
                Link = pl.ProjectLink,
                Visibility = pl.IsPrivateOrPublic
            }).ToList() ?? new List<ProjectLinksData>() { new ProjectLinksData() { Label = string.Empty, Link = string.Empty } }; // Ensure linkInputs is always initialized

        if (linkInputs.Count() == 0)
        {
            linkInputs = new List<ProjectLinksData>() { new ProjectLinksData() { Label = string.Empty, Link = string.Empty } }; // Ensure linkInputs is always initialized
        }
        var firstLink = existedData.FirstOrDefault();
        isSingleProject = !existedData.Any() ? false : firstLink?.IsSingleLink ?? false;
        isMultipleProjects = !existedData.Any() ? false : !isSingleProject; // Fix: Ensure the right toggle is selected

        selectedProject = project;
        isEditModalOpen = true;
        isLoading = false; // Hide spinner

        await InvokeAsync(StateHasChanged);
    }

    private void CloseEditModal()
    {
        isEditModalOpen = false;
        selectedProject = null;
    }


    private async void OpenViewModal(ProjectsGridDTO project)
    {
        if (project == null) return;

        isLoading = true; // Show spinner
        await InvokeAsync(StateHasChanged);

        using var context = DbFactory.CreateDbContext();

        // Fetch project links related to the selected project
        var projectLinks = await context.ProjectLinks
                                        .Where(pl => pl.ProjectId == project.Id)
                                        .Select(pl => new ProjectLinksData
                                            {
                                                Label = pl.ProjectReportName,
                                                Link = pl.ProjectLink
                                            })
                                        .ToListAsync();

        // Assign the fetched links to the selected project
        project.ProjectLinksData = projectLinks ?? new List<ProjectLinksData>();

        selectedProject = project;
        isViewModalOpen = true;
        isLoading = false; // Hide spinner

        await InvokeAsync(StateHasChanged);
    }

    private void CloseViewModal()
    {
        isViewModalOpen = false;
        selectedProject = null;
    }

    #endregion

    #region Event Handlers
    private async Task ToggleSingleProject(ChangeEventArgs e)
    {
        isSingleProject = (bool)e.Value;
        isMultipleProjects = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleMultipleProjects(ChangeEventArgs e)
    {
        isMultipleProjects = (bool)e.Value;
        isSingleProject = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task TogglePivateProjects(int index, ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            linkInputs[index].Visibility = Convert.ToInt32(e.Value);
        }
        await InvokeAsync(StateHasChanged);
    }
    #endregion

    #region Project Links Management
    private void UpdateProjectLabel(int index, string value)
    {
        if (index >= 0 && index < linkInputs.Count())
        {
            linkInputs[index].Label = value;
        }
    }

    private void UpdateProjectLink(int index, string value)
    {
        if (index >= 0 && index < linkInputs.Count())
        {
            linkInputs[index].Link = value;
        }
    }

    private void AddNewLink()
    {
        linkInputs.Add(new ProjectLinksData());
    }

    private void RemoveLink(int index)
    {
        if (index >= 0 && index < linkInputs.Count)
        {
            linkInputs.RemoveAt(index);
        }
    }

    private async Task SaveProjectChanges()
    {
        if (selectedProject == null || linkInputs == null || !linkInputs.Any())
            return;

        try
        {
            using var context = DbFactory.CreateDbContext();

            // Delete existing project links before inserting new ones
            await DeleteExistingProjectLinks(context, selectedProject.Id);

            // Prepare and save new project links
            await SaveNewProjectLinks(context);

            await context.SaveChangesAsync();

            _navigation.NavigateTo("/Projects", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving project changes: {ex.Message}");
        }
        finally
        {
            ResetState();
        }
    }

    private async Task DeleteExistingProjectLinks(DashboardDbContext context, long projectId)
    {
        await context.ProjectLinks
                     .Where(pl => pl.ProjectId == projectId)
                     .ExecuteDeleteAsync(); // No argument needed
    }


    private async Task SaveNewProjectLinks(DashboardDbContext context)
    {
        var projectLinks = new List<ProjectLinks>();
        selectedProject.ProjectLinksData = new List<ProjectLinksData>();

        if (isSingleProject)
        {
            var firstLink = linkInputs.FirstOrDefault();
            if (firstLink == null) return;

            selectedProject.ProjectLinksData.Add(new ProjectLinksData
                {
                    Label = selectedProject.Name,
                    Link = firstLink.Link
                });

            projectLinks.Add(new ProjectLinks
                {
                    IsSingleLink = true,
                    ProjectLink = firstLink.Link,
                    ProjectReportName = selectedProject.Name,
                    ProjectId = selectedProject.Id,
                    IsPrivateOrPublic = firstLink.Visibility
                });
        }
        else
        {
            projectLinks.AddRange(linkInputs
                .Where(data => data != null)
                .Select(data => new ProjectLinks
                    {
                        IsSingleLink = false,
                        ProjectLink = data.Link,
                        ProjectReportName = data.Label,
                        ProjectId = selectedProject.Id,
                        IsPrivateOrPublic = data.Visibility
                    }));

            selectedProject.ProjectLinksData.AddRange(linkInputs);
        }

        if (projectLinks.Any())
        {
            context.ProjectLinks.AddRange(projectLinks);
        }
    }

    private void ResetState()
    {
        isEditModalOpen = false;
        linkInputs.Clear();
        isMultipleProjects = false;
        isSingleProject = false;
    }

    #endregion

    #region Export Methods
    private async Task ExportToExcel()
    {
        List<ProjectsGridDTO> data = FilteredData.ToList();
        var columnHeaders = new List<string>
        {
            "Project Name",
            "Location",
            "Location Type",
            "No of Target Beneficiaries",
            "CSR/Partner/Donor Name",
            "Contact Person",
            "Contact Number",
            "Email",
            "Status"
        };

        var fileContents = _excel.GenerateExcelFile(data, columnHeaders, item => new object[]
        {
            item.Name,

        });

        using (var stream = new MemoryStream(fileContents))
        {
            var fileName = $"Projects-{DateTime.Now}.xlsx";
            var base64Data = Convert.ToBase64String(stream.ToArray());
            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, base64Data);
        }
    }
    #endregion
    private bool isCreateModalOpen = false;

    // Method to open the "Create Project" modal
    private void OpenCreateModal()
    {
        isCreateModalOpen = true;
    }

    // Method to close the "Create Project" modal
    private void CloseCreateModal()
    {
        isCreateModalOpen = false;
    }
    #region Models
    public class ProjectLinksData
    {
        public string Label { get; set; } = string.Empty;
        public string Link { get; set; } = string.Empty;
        public int Visibility { get; set; } = 0;
    }
    #endregion

    private void UpdateVisibility(int index, ProjectVisibility visibility)
    {
        linkInputs[index].Visibility = (int)visibility;
    }
}