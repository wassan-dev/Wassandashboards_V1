@page "/users"

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Wassandashboard.Data
@using Wassandashboard.Data.Entities
@inject DashboardDbContext _context
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject NavigationManager Navigation

<PageTitle>Users</PageTitle>

<div class="row">
    <div class="d-flex justify-content-between align-items-center">
        <h4 class="mt-3">User</h4>
        <a class="btn btn-sm btn-success" href="/account/register">Create New</a>
    </div>
    <hr />
    <div class="card" style="overflow:auto">
        <QuickGrid Class="table" Items="Users" Pagination="pagination">
            <PropertyColumn Property="user => user.UserName" />
            <PropertyColumn Property="user => user.Email" />
            <PropertyColumn Property="user => user.EmailConfirmed" Title="Active" />
            <TemplateColumn class="text-nowrap" Context="user">
                <button @onclick="@(e => ShowNgos(user.Email))" class="btn btn-sm" style="background-color:#626F47; border-color:#626F47; color: white;">Manage Regions</button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="pagination" />
    </div>
</div>

<!-- Modal for Managing Regions -->
@if (isModalVisible)
{

    <div class="modal show d-block" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered w-75 modal-dialog-scrollable">
            <div class="modal-content">
               @*  <div class="modal-header">
                    <h5 class="modal-title">Manage Regions for @UserName</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div> *@

                <div class="modal-body">
                <ManageNgos UserName="@UserName"/>

                </div>
@* 
                <div class="modal-footer">
                    <button class="btn btn text-white" style="background-color:#779c79" @onclick="SaveRegions">Save Changes</button>
                    <button class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div> *@
            </div>
        </div>
    </div>
}

@code {
    public IQueryable<ApplicationUser> Users { get; set; }
    public PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private HashSet<long> selectedRegionIds = new();

    private bool isModalVisible = false;  // Control modal visibility
    private string UserName { get; set; }
    private List<ManageRegions> regions;


    // This method runs when the page is first loaded
    protected override async Task OnInitializedAsync()
    {
        // Get the list of users for the application role
        var list = await UserManager.GetUsersInRoleAsync(AppConstants.ApplicationRole);
        Users = list.AsQueryable();
    }

    // Show Manage Regions Modal for the selected user
    private async Task ShowNgos(string userEmail)
    {
        UserName = userEmail;  // Set the username for the modal
        isModalVisible = true;  // Show the modal

        // Fetch regions from the Regions DbSet in DashboardDbContext and set their selected status (false by default)
        regions = await _context.Regions
            .Select(region => new ManageRegions
            {
                RegionName = region.RegionName,
                Id = region.Id,  // Ensure Id is part of the object
                Selected = false // Set selected to false initially (you can modify this logic based on requirements)
            })
            .ToListAsync();
    }

    // Toggle the selection of regions
    private void ToggleRegionAssignment(long regionId, bool isChecked)
    {
        if (isChecked)
            selectedRegionIds.Add(regionId);  // Add region to selected set
        else
            selectedRegionIds.Remove(regionId);  // Remove region from selected set
    }

    private void SaveRegions()
    {
        // Logic to save the selected regions for the user
        // You can now iterate over the regions and save them to the database as per your requirements

        // For example, saving to a ManageRegions table:
        // 1. Remove old assignments
        // 2. Add new assignments based on `regions` where `Selected = true`

        // After saving, close the modal and redirect
        isModalVisible = false;  // Close the modal
        Navigation.NavigateTo("/users"); // Redirect back to users page
    }


    // Close the modal
    private void CloseModal()
    {
        isModalVisible = false;  // Close the modal
    }

    // ManageRegions class to hold the RegionName, RegionId, and Selection status
    public class ManageRegions
    {
        public string RegionName { get; set; }
        public long Id { get; set; }  // Add the Id property to access region id
        public bool Selected { get; set; }
    }
}
